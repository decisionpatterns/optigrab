% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/opt_get.R
\name{opt_get}
\alias{opt_get}
\alias{opt_get_gnu}
\alias{opt_get_java}
\alias{opt_get_ms}
\alias{opt_grab}
\title{Get option's values from the command-line}
\usage{
opt_get(name, default, n, ..., style = getOption("optigrab")$style)

opt_grab(flag, n = 1, required = FALSE, description = NULL,
  opts = commandArgs())

opt_get_gnu(flag, ...)

opt_get_ms(flag, ...)

opt_get_java(flag, ...)
}
\arguments{
\item{name}{character; vector of possible synonymes for the "flag" that
identifies the option.}

\item{default}{any; the value(s) provided if the flag is not found
(default: \code{NA} )}

\item{n}{integer; number of values to retrieve. See Details.
(default: \code{1})}

\item{...}{additional arguments passed to \code{opt_grab}}

\item{style}{list; list of functions that define the parsing style}

\item{flag}{character; vector of possible synonyms for the "flag" that
identifies the option.}

\item{required}{logical; whether the value is required. If not found or an
       incorrect, number of values are found, an error is thrown.
       (default: \code{FALSE})}

\item{description}{(character) message to be printed with \code{opt_help}}

\item{opts}{character; vector to parse for options
       (default: \code{commandArgs()})}
}
\value{
a value parsed the opts vector associated with the flag.
}
\description{
Returns value(s) from the command-line associated with the desired option.
}
\details{
\code{opt_get} parses the command-line vector extracting
value(s) that are identified by one or more \code{flag}s.

\code{opt_grab} is the workhorse that does the actual parsing. It is
currently exported, but this may change in future version to be an internal
function.

Both are useful with code executed using \code{Rscript},
a \code{#!} on linux systems or \code{R CMD BATCH}. By default, it closely
follows the ubiquitous GNU standards for command-line interfaces. It departs
from other command-line interface packages by avoiding complex specifications
in favor of a lighter more straight-forward interface.

\code{flag} is used to identify the command line flag. It can include all
synonyms for the flags.

\code{n} the number of value(s) to retrieve from the command line.  If
\code{n=0}, then a logical value is returned indicating whether the flag
exists

\code{required} indicates if a value is required. If the the flag is not
found and there is no \code{default} given or if there is not the correct
number of value(s) an error is raised.

\code{opts} is the vector from which options are parsed. By default, this is
\code{commandArgs()}.
}
\examples{
opts <- c( '--foo', 'bar' )

  opt_get('foo')
  opt_get( c('foo'), opts=opts )
  opt_grab( c('--foo'), opts=opts )

  opt_get_ms( c('foo'), opts=c('/foo', 'bar' ) )
  opt_get_java( c('foo'), opts=c('-foo', 'bar' ) )


  # Using pipes:
  \dontrun{
    c('foo', 'f') \%>\% opt_get('bar')
  }
}
\references{
http://www.gnu.org/prep/standards/standards.html
}
\seealso{
\code{\link{commandArgs}}
}

