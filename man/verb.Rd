% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/verb.R
\name{verb}
\alias{verb}
\title{verb}
\usage{
verb(x)
}
\arguments{
\item{cl}{character; Vector from which to parse verb 
(default: \code{commandArgs()} )}
}
\value{
character of length 1; the verb found from the command-line. 
\code{NA} if a verb cannot be identified.
}
\description{
Return the command verb verb
}
\details{
Some applications such as \emph{git} support commend verbs, e.g. \code{push},
\code{fetch}, etc. These can be retrieved by \code{opt_get_verb}.

\code{opt_get_verb} look for the first unaccounted for options (after 
\code{--args}). The number of options needed by each flags is determined by 
and saved by calls to \code{\link{opt_get}}. See the details to see how 
\code{n} is automatically determined.  When not explicitly defined the number
of options needed by each flag is 1.  Becasue of this, it convention to call 
\code{opt_get_verb} after all \code{opt_get} calls.  For most simple 
applications, it likely doesn't matter.  

A verb cannot have the form of an option flag, i.e. 
\code{is.flag(verb) == FALSE}.
}
\section{Assumptions}{


\code{opt_get_verb} assumes any flags occurring before the verb have 
exactly 1 value. A command line such as "> myscript --verbose verb" will be 
misparsed; the code will assume that "verb" is the value of the 
flag "--verbose"
}
\examples{
  verb( c() ) # NULL 
   
  str_to_cl("R --args verb --foo " )  \%>\% script_opts \%>\% verb()
  c("R",  "--args", "verb1", "--foo" )  \%>\% verb()
  
}
\seealso{
Technical Specification#verb /cr
  \code{\link{opt_get}} \cr
  \code{\link{base}{commandArgs}} /cr
}

